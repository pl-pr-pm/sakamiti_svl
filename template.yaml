AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  idle-prediction

  Define the 
  -lambda function
  -api gateway
  to perform the inference task of the SAKAMITI group.
  
  lambda function use EFS to import modules.
  Layers does not use because of too big to store in it.
  
  TODO: Go out id
  
Resources:
  # Definition of API Gateway (Http api)
    HttpApiGateway:
      Type: AWS::Serverless::HttpApi
      Properties:
        CorsConfiguration:
          AllowOrigins:
            - '*'
          AllowMethods:
            - POST
          AllowHeaders:
            - '*'
        Auth:
          DefaultAuthorizer: IdlePredictionAuthorizer
          Authorizers:
            IdlePredictionAuthorizer:
              FunctionArn: !GetAtt authIdle.Arn
              FunctionInvokeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/InvokeLambdaFunction
              FunctionPayloadType: REQUEST
              Identity:
                Headers:
                  - Authorization
              AuthorizerPayloadFormatVersion: 2.0
              EnableSimpleResponses: true
    
    authIdle:
      Type: 'AWS::Serverless::Function'
      Properties:
         CodeUri: authorizer/
         Handler: authorizer.lambda_handler
         Runtime: python3.8
         Description: 'Idle Prediction s authorizer'
         Environment:
           Variables:
             source: '{{resolve:ssm:target_source:2}}'
           
    upload:
      Type: 'AWS::Serverless::Function'
      Properties:
         CodeUri: upload/
         Handler: upload.lambda_handler
         Runtime: python3.8
         Description: 'Place request image file on EFS'
         MemorySize: 1024
         Timeout: 30
         Role: !Sub arn:aws:iam::${AWS::AccountId}:role/updateRole
         Policies:
            - EFSWriteAccessPolicy:
               FileSystem: '{{resolve:ssm:filesystem_id:1}}'
               AccessPoint: '{{resolve:ssm:access_point:1}}'
         VpcConfig:
            SecurityGroupIds:
               - sg-0ed52eacf5d66b388
            SubnetIds:
               - subnet-05e3fb2a306d15126
         FileSystemConfigs:
            - Arn: !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/{{resolve:ssm:access_point:1}}
              LocalMountPath: /mnt/efs
         Events:
            Api:
               Type: HttpApi
               Properties:
                  Path: /image/upload
                  Method: post
                  ApiId: !Ref HttpApiGateway
  
    preprocess:
      Type: 'AWS::Serverless::Function'
      Properties:
         CodeUri: preprocess/
         Handler: preprocess.lambda_handler
         Runtime: python3.8
         Description: 'Perform image editing before inference. Resize the image and extract the face.'
         MemorySize: 512
         Timeout: 95
         Role: !Sub arn:aws:iam::${AWS::AccountId}:role/preprocessRole
         Policies:
            - EFSWriteAccessPolicy:
               FileSystem: '{{resolve:ssm:filesystem_id:1}}'
               AccessPoint: '{{resolve:ssm:access_point:1}}'
         VpcConfig:
            SecurityGroupIds:
               - sg-0ed52eacf5d66b388
            SubnetIds:
               - subnet-05e3fb2a306d15126
         FileSystemConfigs:
            - Arn: !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/{{resolve:ssm:access_point:1}}
              LocalMountPath: /mnt/efs
         Events:
            Api:
               Type: HttpApi
               Properties:
                  Path: /models/preprocess
                  Method: post
                  ApiId: !Ref HttpApiGateway
    
    prediction:
       Type: 'AWS::Serverless::Function'
       Properties:
          CodeUri: prediction/
          Handler: prediction.lambda_handler
          Runtime: python3.8
          Description: 'Infer the SAKAMITI group from the image'
          MemorySize: 1024
          Timeout: 95
          Role: !Sub arn:aws:iam::${AWS::AccountId}:role/predictionRole
          Policies:
            - EFSWriteAccessPolicy:
               FileSystem: '{{resolve:ssm:filesystem_id:1}}'
               AccessPoint: '{{resolve:ssm:access_point:1}}'
          VpcConfig:
            SecurityGroupIds:
               - sg-0ed52eacf5d66b388
            SubnetIds:
               - subnet-05e3fb2a306d15126
          FileSystemConfigs:
            - Arn: !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/{{resolve:ssm:access_point:1}}
              LocalMountPath: /mnt/efs
          Events:
             Api:
                Type: HttpApi
                Properties:
                   Path: /models/prediction
                   Method: post
                   ApiId: !Ref HttpApiGateway
    housekeep:
       Type: 'AWS::Serverless::Function'
       Properties:
          CodeUri: housekeep/
          Handler: housekeep.lambda_handler
          Runtime: python3.8
          Description: 'Remove image file on EFS'
          MemorySize: 256
          Timeout: 15
          Role: !Sub arn:aws:iam::${AWS::AccountId}:role/predictionRole
          Policies:
            - EFSWriteAccessPolicy:
               FileSystem: '{{resolve:ssm:filesystem_id:1}}'
               AccessPoint: '{{resolve:ssm:access_point:1}}'
          VpcConfig:
            SecurityGroupIds:
               - sg-0ed52eacf5d66b388
            SubnetIds:
               - subnet-05e3fb2a306d15126
          FileSystemConfigs:
            - Arn: !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/{{resolve:ssm:access_point:1}}
              LocalMountPath: /mnt/efs
          Environment:
            Variables:
              target_housekeep: '{{resolve:ssm:target_housekeep:1}}'
              remove_diff_day: '{{resolve:ssm:remove_diff_day:1}}'
          Events:
            HouseKeepEvent:
              Type: Schedule
              Properties:
                #Since the data of the date before today is deleted, there is no problem if the access is low (midnight to morning).
                #â†“UTC
                Schedule: cron(0 0 * * ? *) 
    
Outputs:
  idlePredictionApi:
    Description: "API Gateway endpoint URL for Prod stage for idlePredictionApi"
    Value: !Sub "https://${HttpApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
          